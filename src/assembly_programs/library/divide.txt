// Created by Aubrey on 7/2/2024
// Division Subroutine for the Standard Library

sign_bit_flag: 8                        // 00001000

divide:
    // Notes:
    // In the case of a divide by zero, this subroutine
    // returns 0.
    // Also, the modulo (num_a % num_b) is stored
    // in arg_a_reg after the subroutine ends, so it is kind of a
    // divmod subroutine.
    //
    // Arguments:
    // arg_a_reg = num_a
    // arg_b_reg = num_b
    //
    // Stack:
    // ret_addr <- stack_ptr_reg
    //
    // Return Value:
    // num_a / num_b

    ldi return_reg, 0                   // Default quotient is 0

    // Check for divide by zero case
    cmp arg_b_reg, x0                   // Compare divisor against 0
    jin divide_loop                     // if divisor != 0 GOTO divide_loop
    ldi pc_reg, divide_return           // else GOTO divide_return

    // While num_a > num_b subtract num_b from num_a and increment return_reg
    divide_loop:
        cmp arg_a_reg, arg_b_reg        // compare num_a and num_b
        ldi arg_c_reg, sign_bit_flag    // load flag bitmask into arg_r_reg
        and flag_reg, arg_c_reg         // test for sign bit flag
        jin divide_return               // if num_a < num_b GOTO divide_return
        inc return_reg                  // increment quotient
        sub arg_a_reg, arg_b_reg        // else num_a -= num_b
        ldi pc_reg, divide_loop         // GOTO divide_loop

    divide_return:
        lod pc_reg, stack_ptr_reg       // return to caller