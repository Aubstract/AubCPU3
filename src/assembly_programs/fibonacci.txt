// Created by Aubrey on 6/18/2024
// Fibonacci Program for SoftCPU2

link "library/ascii.txt"
link "library/console.txt"

entry:
    dec stack_ptr_reg                           // make room on stack
    ldi x5, end_prog                            // load return addr
    sto x5, stack_ptr_reg                       // push return addr
    ldi pc_reg, main                            // jump to main
    end_prog:
        inc stack_ptr_reg                       // deallocate return addr
        hlt                                     // end program

carry_out_flag: 4

main:
    // load bitmask for carry flag
    ldi x8, carry_out_flag

    // load first two terms
    ldi x5, 0
    ldi x6, 1

    // print first term
    dec stack_ptr_reg                           // make room on stack
    ldi arg_a_reg, ret_print_first_term         // load return addr
    sto arg_a_reg, stack_ptr_reg                // push return addr
    cpr arg_a_reg, x5                           // copy first term to arg_a
    ldi arg_b_reg, console_uint_mode_opcode     // load console mode into arg_b
    ldi pc_reg, print                           // call print subroutine
    ret_print_first_term:
        inc stack_ptr_reg                       // deallocate return addr

    // Print newline character
    dec stack_ptr_reg                           // make room on stack
    ldi arg_a_reg, ret_first_newline              // load return addr
    sto arg_a_reg, stack_ptr_reg                // push return addr
    ldi arg_a_reg, ascii_newline                  // copy term to arg_a
    ldi arg_b_reg, console_char_mode_opcode     // load console mode into arg_b
    ldi pc_reg, print                           // call print subroutine
    ret_first_newline:
        inc stack_ptr_reg                       // deallocate return addr

    // print second term
    dec stack_ptr_reg                           // make room on stack
    ldi arg_a_reg, ret_print_sec_term           // load return addr
    sto arg_a_reg, stack_ptr_reg                // push return addr
    cpr arg_a_reg, x6                           // copy second term to arg_a
    ldi arg_b_reg, console_uint_mode_opcode     // load console mode into arg_b
    ldi pc_reg, print                           // call print subroutine
    ret_print_sec_term:
        inc stack_ptr_reg                       // deallocate return addr

    // Print second newline character
    dec stack_ptr_reg                           // make room on stack
    ldi arg_a_reg, ret_second_newline             // load return addr
    sto arg_a_reg, stack_ptr_reg                // push return addr
    ldi arg_a_reg, ascii_newline                  // copy term to arg_a
    ldi arg_b_reg, console_char_mode_opcode     // load console mode into arg_b
    ldi pc_reg, print                           // call print subroutine
    ret_second_newline:
        inc stack_ptr_reg                       // deallocate return addr

    fib_loop:
        // Calculate fib term
        cpr x7, x5                              // copy first term to x7 (x7 acts as accumulator)
        add x7, x6                              // compute fib
        cpr x5, x6                              // move terms for next iteration
        cpr x6, x7

        // Halt condition
        and flag_reg, x8                        // test carry flag using bitmask in x8
        jin exit_loop                           // exit loop if carry is set

        // Print fibonacci term
        dec stack_ptr_reg                       // make room on stack
        ldi arg_a_reg, ret_loop_print           // load return addr
        sto arg_a_reg, stack_ptr_reg            // push return addr
        cpr arg_a_reg, x6                       // copy term to arg_a
        ldi arg_b_reg, console_uint_mode_opcode // load console mode into arg_b
        ldi pc_reg, print                       // call print subroutine
        ret_loop_print:
            inc stack_ptr_reg                   // deallocate return addr

        // Print newline character
        dec stack_ptr_reg                       // make room on stack
        ldi arg_a_reg, ret_newline_print          // load return addr
        sto arg_a_reg, stack_ptr_reg            // push return addr
        ldi arg_a_reg, ascii_newline              // copy term to arg_a
        ldi arg_b_reg, console_char_mode_opcode // load console mode into arg_b
        ldi pc_reg, print                       // call print subroutine
        ret_newline_print:
            inc stack_ptr_reg                   // deallocate return addr

        // Unconditional loop
        ldi pc_reg, fib_loop                    // GOTO fib_loop

    exit_loop:
        lod pc_reg, stack_ptr_reg               // return to caller