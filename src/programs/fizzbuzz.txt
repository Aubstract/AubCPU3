// Created by Aubrey on 7/3/2024
// FizzBuzz Program

link "library/modulo.txt"
link "library/ascii.txt"
link "library/print_word.txt"

fizz_ptr: 16                                    // addr of "Fizz" string in RAM
buzz_ptr: 20                                    // addr of "Buzz" string in RAM

max_count: 100
fizz_mod: 3
buzz_mod: 5
fizz_len: 4
buzz_len: 4
zero_flag_bitmask: 1

entry:
    dec stack_ptr_reg                           // make room on stack
    ldi x5, (end_prog 1 -)                      // load return addr
    sto x5, stack_ptr_reg                       // push return addr
    ldi pc_reg, (main 1 -)                      // jump to main
    end_prog:
        inc stack_ptr_reg                       // deallocate return addr
        hlt                                     // end program

main:
    // Load ascii values
    ldi x5, ascii_F
    ldi x6, ascii_i
    ldi x7, ascii_z
    ldi x8, ascii_B
    ldi x9, ascii_u

    // Store "Fizz" and set x10 to fizz_ptr
    ldi x10, fizz_ptr
    sto x5, x10                                 // Write 'F' to RAM at 0x10
    inc x10
    sto x6, x10                                 // Write 'i' to RAM at 0x11
    inc x10
    sto x7, x10                                 // Write 'z' to RAM at 0x12
    inc x10
    sto x7, x10                                 // Write 'z' to RAM at 0x13

    // Store "Buzz" and set x11 to buzz_ptr
    ldi x11, buzz_ptr
    sto x8, x11                                 // Write 'B' to RAM at 0x14
    inc x11
    sto x9, x11                                 // Write 'u' to RAM at 0x15
    inc x11
    sto x7, x11                                 // Write 'z' to RAM at 0x16
    inc x11
    sto x7, x11                                 // Write 'z' to RAM at 0x17

    // Initialize variables used in loop
    ldi x5, 1                                   // Initialize the counter
    ldi x6, max_count                           // Load max counter value
    ldi x7, zero_flag_bitmask                   // Load bitmask

    fb_loop:
        // Reset the boolean
        ldi x8, 0                               // x8 is a bool meaning "don't print counter"

        // FizzBuzz logic
        
        // FIZZ: if counter % fizz_mod == 0 then print "Fizz"
        //
        // do modulo
        cpr arg_a_reg, x5                       // load counter into arg_a
        ldi arg_b_reg, fizz_mod                 // load fizz_mod into arg_b
        dec stack_ptr_reg                       // make room on stack for return addr
        ldi x9, (ret_fizz_mod 1 -)              // load return addr
        sto x9, stack_ptr_reg                   // push return addr
        ldi pc_reg, (modulo 1 -)                // jump to modulo subroutine
        ret_fizz_mod:
        inc stack_ptr_reg                       // deallocate return addr
        // if result != 0 skip to buzz
        orr x0, return_reg                      // test return value
        jin buzz                                // if result != 0 jump to buzz
        // else if result == 0, print "Fizz"
        ldi x8, 1                               // set bool to "true"
        dec stack_ptr_reg                       // make room on stack
        ldi x9, (ret_print_fizz 1 -)            // load return addr
        sto x9, stack_ptr_reg                   // push return addr
        ldi arg_a_reg, fizz_ptr                 // load fizz_ptr into arg_a
        ldi arg_b_reg, fizz_len                 // load fizz_len into arg_b
        ldi pc_reg, (print_word 1 -)            // call print_word subroutine
        ret_print_fizz:
        inc stack_ptr_reg                       // deallocate return addr
        
        buzz:
        // BUZZ: if counter % buzz_mod == 0 then print "Buzz"
        //
        // do modulo
        cpr arg_a_reg, x5                       // load counter into arg_a
        ldi arg_b_reg, buzz_mod                 // load buzz_mod into arg_b
        dec stack_ptr_reg                       // make room on stack for return addr
        ldi x9, (ret_buzz_mod 1 -)              // load return addr
        sto x9, stack_ptr_reg                   // push return addr
        ldi pc_reg, (modulo 1 -)                // jump to modulo subroutine
        ret_buzz_mod:
        inc stack_ptr_reg                       // deallocate return addr
        // if result != 0 skip to buzz
        orr x0, return_reg                      // test return value
        jin counter                             // if result != 0 jump to counter
        // else if result == 0, print "Buzz"
        ldi x8, 1                               // set bool to "true"
        dec stack_ptr_reg                       // make room on stack
        ldi x9, (ret_print_buzz 1 -)            // load return addr
        sto x9, stack_ptr_reg                   // push return addr
        ldi arg_a_reg, buzz_ptr                 // load buzz_ptr into arg_a
        ldi arg_b_reg, buzz_len                 // load buzz_len into arg_b
        ldi pc_reg, (print_word 1 -)            // call print_word subroutine
        ret_print_buzz:
        inc stack_ptr_reg                       // deallocate return addr
        
        counter:
        // COUNTER: else print counter
        orr x0, x8                              // test the bool
        jin skip_counter                        // if bool is true, skip printing the counter
        cpr arg_a_reg, x5                       // copy the counter to arg_a
        ldi arg_b_reg, console_uint_mode_opcode // load console uint mode into arg_b
        dec stack_ptr_reg                       // make room on stack
        ldi x9, (ret_print_count 1 -)           // load return addr
        sto x9, stack_ptr_reg                   // push return addr
        ldi pc_reg, (print 1 -)                 // call print subroutine
        ret_print_count:
        inc stack_ptr_reg                       // deallocate return addr

        skip_counter:

        // Print newline character
        ldi arg_a_reg, ascii_newline            // load End of Line char into arg_a
        ldi arg_b_reg, console_char_mode_opcode // load console char opcode into arg_b
        dec stack_ptr_reg                       // make room on stack
        ldi x9, (ret_print_eol 1 -)             // load return addr
        sto x9, stack_ptr_reg                   // push return addr
        ldi pc_reg, (print 1 -)                 // call print subroutine
        ret_print_eol:
        inc stack_ptr_reg                       // deallocate return addr

        // If (counter == max_count), exit loop
        cmp x5, x6                              // compare counter to max_count
        and flag_reg, x7                        // check the zero flag (equality check)
        jin exit_fb_loop                        // if they are equal break the loop

        // Else print a newline and then loop
        inc x5                                  // increment counter
        ldi pc_reg, (fb_loop 1 -)               // loop

    exit_fb_loop:
        lod pc_reg, stack_ptr_reg               // return to caller